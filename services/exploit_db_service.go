package services

import (
	"fmt"
	"io"
	"net/http"
	"shellcode-db/model"
	services "shellcode-db/services/model"

	"github.com/gocarina/gocsv"
)

type APIService struct{}

func NewExploitDbService() *APIService {
	return &APIService{}
}

func (api *APIService) FetchArchitectures() ([]model.Architecture, error) {
	url := "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_shellcodes.csv"
	response, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("unexpected status code: %d", response.StatusCode)
	}

	var shellcodesExploitDB []services.Shellcode
	body, _ := io.ReadAll(response.Body)

	if err := gocsv.UnmarshalBytes(body, &shellcodesExploitDB); err != nil {
		return nil, err
	}

	var shellcodes []model.Architecture
	mapArchitectureShell := map[string][]model.Shellcode{}

	for _, shell := range shellcodesExploitDB {
		fileUrl := fmt.Sprintf("https://gitlab.com/exploit-database/exploitdb/-/raw/main/%s", shell.File)
		response, err := http.Get(fileUrl)
		if err != nil {
			continue
		}

		if response.StatusCode != http.StatusOK {
			continue
		}

		body, _ := io.ReadAll(response.Body)
		response.Body.Close()

		mapArchitectureShell[shell.Platform] = append(mapArchitectureShell[shell.Platform],
			model.Shellcode{ID: shell.Id, Name: shell.Description, DatePublished: shell.DatePublished, Data: string(body)})
	}

	for key, value := range mapArchitectureShell {
		shellcodes = append(shellcodes, model.Architecture{ID: key, Name: key, Shellcodes: value})
	}

	return shellcodes, nil
}
